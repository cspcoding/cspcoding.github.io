<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>区间dp(链)模型</title>
      <link href="/2024/07/31/%E5%8C%BA%E9%97%B4dp(%E9%93%BE)%E6%A8%A1%E5%9E%8B/"/>
      <url>/2024/07/31/%E5%8C%BA%E9%97%B4dp(%E9%93%BE)%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一理论教学">一、理论教学</h1><h2 id="模型说明">1.1 模型说明</h2><p>　　现在有N个数据依次排成一条线，不允许移动（即有序），首尾不连接。现在要对这N个数据进行合并，要求只能合并相邻的两个数据，合并后的数据可以参与下一次合并。现在给定每次数据合并产生的代价，求将所有数据合并成一个数所产生的最小代价/最大代价。</p><p>　　<strong><ahref="http://ybt.ssoier.cn:8088/problem_show.php?pid=1274">1274：【例9.18】合并石子</a></strong>是区间dp的标准模板题型。理论上来说，也可以要求每次只能选择相邻的三堆数据。</p><h2 id="分析">1.2 分析</h2><p>　　如果N个数据是无序的，允许任意选择数据来合并的话，整个过程就变成了<ahref="https://www.luogu.com.cn/problem/P1090">P1090 [NOIP2004 提高组]合并果子 / [USACO06NOV] Fence RepairG</a>这种二叉或者K叉哈夫曼树问题，用贪心的思想来解决问题即可。但当前题型要求不能任意选择数据，每次合并只能选择<strong>相邻</strong>的两个数据进行合并。“合并相邻数据”，这是区间dp的一个很典型的特征。下面介绍区间dp的做法（以求最小值为例）。</p><ol type="1"><li><p>状态数组定义</p><p>　　dp[le][ri]表示将编号从le到ri的这个区间内所有数据进行合并所需的最小代价。</p></li><li><p>所求目标</p><p>　　dp[1][n]表示将编号从1到n的这个区间内所有数据进行合并所需的最小代价。</p></li><li><p>状态转移方程</p><p>　　对于这种稍微复杂点的问题，同学们最好是举个例子来分析，拿出你的草稿纸和笔！</p><p>根据状态数据的基本定义，我们可以得到如下： <spanclass="math display">\[dp[1][5]=min\begin{cases} dp\textcolor{red}{[1][1]}+dp[2][5] +\quad合并[1..1]和[2..5]所需代价\\ dp[1][2]+dp[3][5]  +\quad合并[1..1]和[2..5]所需代价\\ dp[1][3]+dp[4][5]  +\quad合并[1..1]和[2..5]所需代价\\ dp[1][4]+dp\textcolor{red}{[5][5]}  +\quad合并[1..1]和[2..5]所需代价\\ \end{cases} \tag{1}\]</span></p><p>　　我们把公式1进一步浓缩一下，得到如下的公式2： <spanclass="math display">\[dp[1][5]=min(dp[1][c]+dp[c+1][5]+\quad合并[1..c]和[c+1..5所需代价])\\(le \leq c \leq \textcolor{red}{ri-1}) \tag{2}\]</span> 　　再把公式2做一般性推广，得到公式3如下： <spanclass="math display">\[dp[le][ri]=min(dp[le][c]+dp[c+1][ri]+\quad合并[le..c]和[c+1..\ri]所需代价)\\(1 \leq le \leq ri\leq n,\quad le \leq c \leq \textcolor{red}{ri-1})\tag{3}\]</span>　　这就是区间dp的公式之一。这个公式有一个假设前提，那就是“假设对区间内的数据进行合并时，是“求和”的模式（注意，也可以求最大值/最小值等，到时候就不是两个dp[][]值相加，而是求max或者min了）”。具体的状态转移方程需要同学们根据实际情况灵活分析和处理，不要死记硬背公式3！</p><p>　　公式3是对多个数据进行比较求最小，在代码实现的时候可以采用<strong>累比</strong>的模式来实现，大致如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> le ... )  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> ri ... ) <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c ...)<br>            dp[le][ri] = <span class="hljs-built_in">min</span>(dp[le][ri], dp[][]+dp[][] + 合并所需代价)　<br></code></pre></td></tr></table></figure></li><li><p>循环顺序和边界值</p><p>　　从公式3来进行分析，要求dp[le][ri]的值，就要求dp[le][c]和dp[c+1][ri]的值已知（即已填过），这样才能根据已知数据填写未知元素。根据dp[le][c]以及方程的要求"<spanclass="math inline">\(c \leqri-1\)</span>"可以看出，要求dp[le][ri]，就<strong>必须要知道当前网格<font color="red">左侧</font>的数据</strong>；根据dp[c+1][ri]以及方程的要求"<spanclass="math inline">\(le \leqc\)</span>"可以看出，要求dp[le][ri]，就<strong>必须要知道当前网格<font color="red">下方</font>的数据</strong>。综上所述，要根据当前网格左方和下方的数据来填写当前网格的数据。所以，我们的循环顺序应该是“从下往上，从左往右”或者“从左往右，从下往上”。鉴于绝大部分程序员都采用“逐行填写”的习惯，所以这里<strong>本帖推荐“从下往上，从左往右”的循环顺序</strong>。</p><p>　　关于循环边界，这里首先要注意一个事情，那就是公式3中有一个<spanclass="math inline">\(le\leqri\)</span>，也就是说，不允许出现dp[4][3]或者dp[8][2]这种情况。归纳一下三个循环变量的顺序和边界如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> le=n; le&gt;=<span class="hljs-number">1</span>; le--)       <span class="hljs-comment">// 从下往上</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> ri=le; ri&lt;=n; ri++)  <span class="hljs-comment">// 从左往右</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c=le; c&lt;= ri<span class="hljs-number">-1</span>; c++) <span class="hljs-comment">// 可增可减，公式1中的4排数据，从上往下min或者从下往上min，都不影响求最终的min值</span><br>            dp[le][ri] = <span class="hljs-built_in">min</span>(dp[le][ri], dp[][]+dp[][] + 合并所需代价)　<br></code></pre></td></tr></table></figure><p>　　从上面的代码可以看到，<strong>整个算法的时间复杂度是<spanclass="math inline">\(O(n^3)\)</span>的，不能处理<spanclass="math inline">\(n \geq200\)</span>的情况</strong>。</p><p>　　其实，除了上面这种最直接地枚举区间左右两端之外，还有第2种枚举方式，时间复杂度相同。对于[1,5]，它是由5个数据经过合并得到的，而它的子问题 [1 ,2] , [2 ,4]等，都是由长度为2~4的区间合并而成。要计算由 n 个数合并而成的区间 [a ,a+n−1]处理的最值dp时，我们要做的是先计算好由长度为 2 至 n−1 的区间[a ,a+c−1]。因为 c 一定小于 n，所以我们可以将区间的长度len作为第一维。只要知道len及left，就能够算出rt的位置。因为长区间都是由短区间的值计算而来，所以，如果短区间的值先计算出来，那么长区间的值的计算自然毫无障碍。大致代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 先计算短区间，然后计算长区间 ，最短长度是2（最少是2个数的合并）</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> len= <span class="hljs-number">2</span>; len&lt;=n; len++)<br>    <span class="hljs-comment">// 枚举左端le值，增序降序都能AC</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> le=<span class="hljs-number">1</span>; le+len<span class="hljs-number">-1</span>&lt;=n; le++)&#123; <br>        <span class="hljs-comment">// 先处理区间[10..13]，或者先处理区间[1..4]都无所谓，相互不影响，正序逆序均可</span><br>        <span class="hljs-comment">//for(int le=n-len+1; le&gt;=1; le--)&#123;  // 正反序均可</span><br>        <span class="hljs-type">int</span> ri = le + len - <span class="hljs-number">1</span>;            <span class="hljs-comment">// 根据le和len来计算出ri</span><br>        <span class="hljs-comment">// 上面的双重for顺序无法适用于平行四边形优化</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c=le; c&lt;=ri<span class="hljs-number">-1</span>; c++)<br>            dp[le][ri] = <span class="hljs-built_in">min</span>(dp[le][ri] , dp[le][c]+dp[c+<span class="hljs-number">1</span>][ri]+合并所需代价);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>初始化和特例</p><p>整个dp数组的左下三角部分是不会被填写的，应该是“无解”，因为区间右端必须要大于等于区间左端。整个数组可以初始化为无解。</p><p>既然是要填写dp数组的右上部分，那特例肯定就不像以前那样在第0行或者在dp[0][0]了。同学们可以想一下，整个数组在三重循环时最先填写的是什么位置上的数据？它需要什么特例呢？可以稍微想一下就会知道，在数组的右下位置需要最先填写。主对角线位置是特例，因为dp[i][i]表示从自己到自己这个区间的合并收益，而从自己到自己是不需要合并的，合并收益为0。所以有如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">memset</span>(dp, -INF, <span class="hljs-built_in">sizeof</span>(dp));<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;=n; i++) dp[i][i]= <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></li></ol><h1 id="二实战训练">二、实战训练</h1><h2 id="合并石子">2.1 1274 合并石子</h2><h3 id="原题链接">2.1.1 原题链接</h3><p>　　<ahref="http://ybt.ssoier.cn:8088/problem_show.php?pid=1274">1274：【例9.18】合并石子</a></p><h3 id="分析-1">2.1.2 分析</h3><p>　　裸的区间dp入门题，n个数据是有序的，任何区间进行合并的代价就是区间数据之和，对两个合并对象进行求和之后再加上该合并操作的额外代价即可。n=100，用裸模板的话，时间复杂度为1e6,可AC本题。本题也可以采用平行四边形优化，后面再说。</p><h3 id="ac代码">2.1.3 AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//// 方法1：区间dp，链，朴素做法，没有用四边形优化。  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 101</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">区间动态规划， 链，求最小值，最朴素的版本，没有用四边形优化。 </span><br><span class="hljs-comment">本题中两个区间合并，是求和值，故用 &quot; + &quot; 来处理两个子区间的dp值 </span><br><span class="hljs-comment">本题用前缀和数组sum[] </span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> data[N], n;<br><span class="hljs-type">int</span> sum[N]; <br><span class="hljs-type">int</span> dp[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-built_in">memset</span>(dp, INF, <span class="hljs-built_in">sizeof</span>(dp));<br>cin &gt;&gt;n;<br><span class="hljs-keyword">for</span>( i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;data[i]);<br>sum[i] = sum[i<span class="hljs-number">-1</span>] + data[i];    <span class="hljs-comment">// 用前缀和数组sum[]来快速记录 </span><br>dp[i][i] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> left=n; left&gt;=<span class="hljs-number">1</span>; left--)<br>    <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> rt=left+<span class="hljs-number">1</span>; rt&lt;=n; rt++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=left; k&lt;=rt<span class="hljs-number">-1</span>; k++)      <span class="hljs-comment">// 普通做法 </span><br>                dp[left][rt] = <span class="hljs-built_in">min</span>(dp[left][rt] , dp[left][k] + dp[k+<span class="hljs-number">1</span>][rt] + sum[rt] - sum[left<span class="hljs-number">-1</span>] ) ;<br><br>cout &lt;&lt; dp[<span class="hljs-number">1</span>][n] &lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础算法 </category>
          
          <category> 动态规划 </category>
          
          <category> 区间dp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
